{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/DetailedCard.js","App.js","serviceWorker.js","index.js"],"names":["card","flag","code","name","nativeName","population","region","subRegion","capital","domain","currencies","languages","showDetailedCard","handleToUpdate","showDetail","className","onClick","console","log","style","backgroundImage","CardList","countries","map","country","i","Card","key","alpha3Code","subregion","topLevelDomain","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflowY","height","children","DetailedCard","removeDetailedCard","App","onSearchChange","event","setState","target","value","state","bind","fetch","then","response","json","data","this","filterCountries","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0cf3964d.chunk.js","sourcesContent":["import React from 'react';\nimport './Layout.css';\n\n\n\n\n\n\nconst card = ({ flag, code, name, nativeName, population, region, subRegion, capital, domain, currencies, languages, showDetailedCard, showDetail, handleToUpdate }) => {\n\n    const changeStates = () => {\n        console.log(flag, code, name, nativeName, population, region, subRegion, capital, domain, currencies, languages);\n        handleToUpdate(flag, code, name, nativeName, population, region, subRegion, capital, domain, currencies, languages);\n        showDetailedCard();\n    }\n\n\n\n    return (\n        <div className='countryCard' onClick={changeStates}>\n            <div className='flagImg' style={{ backgroundImage: \"url(\" + flag + \")\" }}></div>\n            <div className='info'>\n                <div>\n                    <h2>{name}</h2>\n                    <div className='detail'>\n                        <p>Population: </p><p>{population}</p>\n                    </div>\n                    <div className='detail'>\n                        <p>Region: </p><p>{region}</p>\n                    </div>\n                    <div className='detail'>\n                        <p>Capital: </p><p>{capital}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ countries, showDetailedCard, showDetail, code, handleToUpdate}) => {\n    return (\n        <div className='cardFlex'>\n            {countries.map((country, i) => {\n                return <Card\n                    showDetail={showDetail}\n                    showDetailedCard={showDetailedCard}\n                    key={[i]}\n                    flag={countries[i].flag}\n                    name={countries[i].name}\n                    population={countries[i].population}\n                    region={countries[i].region}\n                    capital={countries[i].capital}\n                    handleToUpdate ={handleToUpdate}\n                    code={countries[i].alpha3Code}\n                    nativeName={countries[i].nativeName}\n                    subRegion = {countries[i].subregion}\n                    domain = {countries[i].topLevelDomain[0]}\n                    currencies ={countries[i].currencies[0].name}\n                    languages={countries[i].languages[0].name}/>\n            })}\n        </div>\n    );\n}\n\nexport default CardList; ","import React from 'react';\nimport './Layout.css';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div>\n            <input\n                className='searchBox' type='search' placeholder='Search for a country'\n                onChange={searchChange} \n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY:'scroll', height:'90%'}}>\n            {props.children}\n        </div >\n    );\n};\n\nexport default Scroll; ","import React from 'react';\nimport './Layout.css';\n\n\n\nconst DetailedCard = ({ countries, searchfield, showDetail, flag, code, name, nativeName, population, region, subRegion, capital, domain, currencies, languages, removeDetailedCard }) => {\n\n    return (\n        <div>\n            <div className='buttonContainer'>\n                <button className='backButton' onClick={removeDetailedCard}>BACK</button>\n            </div>\n            <div className='detailedCard'>\n                <div className='detailBox'>\n                    <div className='detailFlagImg' style={{ backgroundImage: \"url(\" + flag + \")\" }}></div>\n                </div>\n                <div className='detailBox'>\n                    <h1>{name}</h1>\n                    <div className='detailInfo'>\n                        <div className='detail2'>\n                            <p>Native Name: </p><p>{nativeName}</p>\n                        </div>\n                        <div className='detail2'>\n                            <p>Population: </p><p>{population}</p>\n                        </div>\n                        <div className='detail2'>\n                            <p>Region: </p><p>{region}</p>\n                        </div>\n                        <div className='detail2'>\n                            <p>Sub Region: </p><p>{subRegion}</p>\n                        </div>\n                        <div className='detail2'>\n                            <p>Capital: </p><p>{capital}</p>\n                        </div>\n                        <div className='detail2'>\n                            <p>Top Level Domain: </p><p>{domain}</p>\n                        </div>\n                        <div className='detail2'>\n                            <p>Currencies: </p><p>{currencies}</p>\n                        </div>\n                        <div className='detail2'>\n                            <p>Languages: </p><p>{languages}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default DetailedCard;","import React, { Component } from 'react';\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox';\nimport './App.css';\nimport Scroll from './components/Scroll';\nimport DetailedCard from './components/DetailedCard';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      countries: [],\n      searchfield: '',\n      showDetail: false,\n      flag: '',\n      code: '',\n      name: '',\n      nativeName: '',\n      population: '',\n      region: '',\n      subRegion: '',\n      capital: '',\n      domain: '',\n      currencies: [],\n      languages: [],\n      handleToUpdate: this.handleToUpdate.bind(this)\n    }\n  }\n  componentDidMount() {\n    fetch('https://restcountries.eu/rest/v2/all')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ countries: data })\n      });\n  }\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  showDetailedCard = () => {\n    this.setState({ showDetail: true })\n  }\n\n  removeDetailedCard = () => {\n    this.setState({ showDetail: false })\n    this.setState({ searchfield: '' })\n  }\n\n  handleToUpdate(flag, code, name, nativeName, population, region, subRegion, capital, domain, currencies, languages) {\n    this.setState({\n      flag: flag,\n      code: code,\n      name: name,\n      nativeName: nativeName,\n      population: population,\n      region: region,\n      subRegion: subRegion,\n      capital: capital,\n      domain: domain,\n      currencies: currencies,\n      languages: languages\n    })\n\n  }\n\n  render() {\n    const { countries, searchfield, showDetail, flag, code, name, nativeName, population, region, subRegion, capital, domain, currencies, languages } = this.state;\n    const filterCountries = countries.filter(countries => {\n      return countries.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    if (showDetail === false) {\n      return (!countries.length) ?\n        <h1>Loading...</h1> :\n        (\n          <div>\n            <div className='headBanner'>\n              <div className='headInfo'>\n                <h1>Where In The World?</h1>\n              </div>\n            </div>\n            <div className='searchFlex'>\n              <SearchBox searchChange={this.onSearchChange} />\n            </div>\n            <Scroll>\n              <CardList countries={filterCountries}\n                showDetail={showDetail}\n                showDetailedCard={this.showDetailedCard}\n                handleToUpdate={this.handleToUpdate.bind(this)}\n                flag={flag}\n                code={code}\n                name={name}\n                nativeName={nativeName}\n                population={population}\n                region={region}\n                subRegion={subRegion}\n                capital={capital}\n                domain={domain}\n                currencies={currencies}\n                languages={languages} />\n            </Scroll>\n          </div>\n        )\n    } else {\n      return (\n        <div>\n          <div className='headBanner'>\n            <div className='headInfo'>\n              <h1>Where In The World?</h1>\n            </div>\n          </div>\n          <DetailedCard\n            removeDetailedCard={this.removeDetailedCard}\n            flag={flag}\n            code={code}\n            name={name}\n            nativeName={nativeName}\n            population={population}\n            region={region}\n            subRegion={subRegion}\n            capital={capital}\n            domain={domain}\n            currencies={currencies}\n            languages={languages}\n          />\n        </div>\n      )\n    }\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}